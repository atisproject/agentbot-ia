import os
import logging
import re
from twilio.rest import Client

# Setup logging
logger = logging.getLogger(__name__)

# Twilio credentials
TWILIO_ACCOUNT_SID = os.environ.get("TWILIO_ACCOUNT_SID")
TWILIO_AUTH_TOKEN = os.environ.get("TWILIO_AUTH_TOKEN")
TWILIO_PHONE_NUMBER = os.environ.get("TWILIO_PHONE_NUMBER")

def formatar_numero_internacional(numero):
    """
    Formata um n√∫mero de telefone para o padr√£o internacional
    
    Args:
        numero (str): N√∫mero de telefone em formato local
    
    Returns:
        str: N√∫mero formatado para padr√£o internacional
    """
    # Remover caracteres n√£o num√©ricos
    apenas_numeros = re.sub(r'\D', '', numero)
    
    # Se o n√∫mero j√° come√ßar com o c√≥digo do pa√≠s '+55', retorna como est√°
    if numero.startswith('+55'):
        return numero
    
    # Se come√ßar com '55', adiciona o '+'
    if apenas_numeros.startswith('55') and len(apenas_numeros) >= 12:
        return f"+{apenas_numeros}"
    
    # Se for um n√∫mero brasileiro sem o c√≥digo do pa√≠s, adiciona +55
    if len(apenas_numeros) >= 10:  # DDD + n√∫mero (pelo menos 10 d√≠gitos)
        return f"+55{apenas_numeros}"
    
    # Retornar o n√∫mero como est√° se n√£o for poss√≠vel formatar
    return numero

def enviar_notificacao_whatsapp(numero_destino, mensagem):
    """
    Envia uma notifica√ß√£o via WhatsApp
    
    Args:
        numero_destino (str): N√∫mero do destinat√°rio
        mensagem (str): Conte√∫do da mensagem
    
    Returns:
        bool: True se a mensagem foi enviada com sucesso, False caso contr√°rio
    """
    try:
        # Verificar se as credenciais do Twilio est√£o configuradas
        if not TWILIO_ACCOUNT_SID or not TWILIO_AUTH_TOKEN or not TWILIO_PHONE_NUMBER:
            logger.error("Credenciais do Twilio n√£o configuradas corretamente")
            return False
        
        # Formatar o n√∫mero para o padr√£o internacional
        numero_formatado = formatar_numero_internacional(numero_destino)
        
        # Inicializar o cliente Twilio
        client = Client(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN)
        
        # N√∫mero da sandbox do WhatsApp da Twilio
        from_whatsapp = f"whatsapp:{TWILIO_PHONE_NUMBER}"
        to_whatsapp = f"whatsapp:{numero_formatado}"
        
        # Enviar mensagem
        message = client.messages.create(
            body=mensagem,
            from_=from_whatsapp,
            to=to_whatsapp
        )
        
        logger.info(f"Notifica√ß√£o WhatsApp enviada: {message.sid}")
        return True
    
    except Exception as e:
        logger.error(f"Erro ao enviar notifica√ß√£o WhatsApp: {str(e)}")
        return False

def notificar_potencial_conversao(nome_cliente, telefone_cliente, probabilidade):
    """
    Notifica o administrador sobre um lead com alta probabilidade de convers√£o
    
    Args:
        nome_cliente (str): Nome do cliente
        telefone_cliente (str): Telefone do cliente
        probabilidade (float): Probabilidade de convers√£o (0-1)
    
    Returns:
        bool: True se a notifica√ß√£o foi enviada com sucesso, False caso contr√°rio
    """
    # N√∫mero do administrador (poderia ser obtido da tabela de configura√ß√µes)
    numero_admin = os.environ.get("ADMIN_PHONE_NUMBER", "+5561985870944")
    
    # Formatar mensagem
    mensagem = f"""üîî *Lead com alta probabilidade de convers√£o!*
    
*Cliente:* {nome_cliente}
*Telefone:* {telefone_cliente}
*Probabilidade:* {int(probabilidade * 100)}%

Recomendamos que entre em contato rapidamente com este cliente."""
    
    # Enviar notifica√ß√£o
    return enviar_notificacao_whatsapp(numero_admin, mensagem)

def enviar_lembrete_formulario(lead_id, tipo_formulario):
    """
    Envia um lembrete para preenchimento de formul√°rio
    
    Args:
        lead_id (int): ID do lead
        tipo_formulario (str): Tipo do formul√°rio pendente
    
    Returns:
        bool: True se o lembrete foi enviado com sucesso, False caso contr√°rio
    """
    from app import db
    from models import Lead, Formulario, Interacao
    
    try:
        # Buscar informa√ß√µes do lead
        lead = Lead.query.get(lead_id)
        if not lead:
            logger.error(f"Lead ID {lead_id} n√£o encontrado para envio de lembrete")
            return False
        
        # Buscar formul√°rio
        formulario = Formulario.query.filter_by(lead_id=lead_id, tipo=tipo_formulario, status='pendente').first()
        if not formulario:
            logger.error(f"Formul√°rio {tipo_formulario} n√£o encontrado para o lead {lead_id}")
            return False
        
        # Formatar mensagem de lembrete
        mensagem = f"""Ol√° {lead.nome}, 

Notamos que voc√™ ainda n√£o preencheu o formul√°rio de {tipo_formulario.replace('_', ' ').title()} que enviamos.

Preencher este formul√°rio √© essencial para podermos personalizar nosso atendimento √†s suas necessidades.

Acesse o formul√°rio aqui: {formulario.link}

Estamos √† disposi√ß√£o para qualquer d√∫vida!"""
        
        # Enviar lembrete via WhatsApp
        enviado = enviar_notificacao_whatsapp(lead.telefone, mensagem)
        
        if enviado:
            # Atualizar contagem de lembretes
            formulario.lembrete_enviado = True
            formulario.numero_lembretes += 1
            
            # Registrar a intera√ß√£o no hist√≥rico
            interacao = Interacao(
                lead_id=lead_id,
                mensagem=mensagem,
                origem="sistema"
            )
            
            db.session.add(interacao)
            db.session.commit()
            
            logger.info(f"Lembrete de formul√°rio enviado com sucesso para o lead {lead_id}")
        
        return enviado
    
    except Exception as e:
        logger.error(f"Erro ao enviar lembrete de formul√°rio: {str(e)}")
        return False
